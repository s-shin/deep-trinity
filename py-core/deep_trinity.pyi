from typing import List, Optional


class Cell:
    EMPTY: Cell
    ANY: Cell
    S: Cell
    Z: Cell
    L: Cell
    J: Cell
    I: Cell
    T: Cell
    O: Cell
    GARBAGE: Cell

    @classmethod
    def from_id(cls, id: int) -> Cell: ...

    @classmethod
    def from_str(cls, s: str) -> Cell: ...

    @property
    def id(self) -> int: ...

    def __str__(self) -> str: ...


class Game:
    def __init__(self): ...

    def fast_mode(self): ...

    def should_supply_next_pieces(self) -> bool: ...

    def supply_next_pieces(self, piece_cell_ids: List[int]): ...

    def setup_falling_piece(self, piece_cell_id: Optional[int] = None): ...

    def drop(self, n: int): ...

    def firm_drop(self): ...

    def shift(self, n: int, to_end: bool): ...

    def rotate(self, n: int): ...

    def lock(self) -> bool: ...

    def hold(self) -> bool: ...

    def __str__(self) -> str: ...
